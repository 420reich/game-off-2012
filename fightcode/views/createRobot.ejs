<% include header.ejs %>
<div class="break"></div>

<div class="create-robot container">
    <div class="header">
        <span class="header-icon"></span>
        <div class="header-title">
            <h1>letâ€™s code a robot?</h1>
        </div>
        <div class="header-subtitle">you can watch the preview to the right and
        read docs below</div>
    </div>

    <form id="robo-code-form" class="create-robot-form" method="POST" action="">
        <div class="row">
            <div class="span12">
                <div class="create-robot-form-container">
                    <div class="left-col form-col">
                        <input type="hidden" class="code" name="code">
                        <% if (locals.update) {%>
                            <input type="hidden" name="_method" value="put">
                        <%} %>
                        <textarea name="title" class="input-subtle" require="required"
                            placeholder="ENTER YOUR ROBOT'S NAME"><% if (locals.robotTitle) { %><%= robotTitle %><% } %></textarea>

                        <div class="robot-color">
                            <input type="hidden" id="robot-color" name="robot-color" value="<%if (locals.robotColor) { %><%= robotColor%><% } %>" />
                            <div class="robot-color-preview js-color-picker-preview">
                            </div>
                            <div class="robot-color-picker-container js-color-picker">
                            </div>
                        </div>

                        <div class="robot-public">
                            <input name="public" id="public" type="checkbox"
                                <% if (public) { %> checked="checked" <% } %> <% if (locals.update) {%> disabled="disabled" <% } %>>
                            <label for="public">public</label>
                        </div>
                    </div>
                    <div class="editor form-col"></div>
                    <div class="board-container form-col"><div class="board"></div></div>
                </div>
            </div>
        </div>

        <div class="buttons-bar">
            <button class="btn" id="submit-btn">SAVE ROBOT</button>
        </div>
    </form>

    <div class="docs container">
        <a name="docs"></a>
        <div class="header">
            <div class="header-title">
                <h1>How to write my robot?</h1>
            </div>
            <div class="header-subtitle">keep reading to know more about our
            javascript robotic API</div>
        </div>

        <h3>Introduction</h3>
        <p><a href="/">fightcodegame.com</a> is a free to play game and you can
        create as many robots as you'd like.</p>
        <p>The game has been made as an experiment and we ask you to not try
        and break things, since they'll probably break.</p>
        <p>Coding your robots is very easy and should be natural if you've ever
        had any Javascript experience.</p>
        <p>Let's see an example of a very simple robot:</p>
        <div class="editor code-sample">
function Robot(robot) {}

// well, we need to do something...
// whenever our robot is idle, this method gets called.
Robot.prototype.onIdle = function(ev) {
    var robot;
    robot = ev.robot;
    robot.ahead(150);
    robot.rotateCannon(360);
    robot.back(100);
    robot.rotateCannon(360);
    robot.turn(20);
};

// this method gets called whenever we hit another robot...
Robot.prototype.onRobotCollision = function(ev) {};

// this method gets called whenever we hit a wall...
Robot.prototype.onWallCollision = function(ev) {};

// yay we see another robot! time to wreak some havoc...
Robot.prototype.onScannedRobot = function(ev) {
    var robot;
    robot = ev.robot;
    robot.fire(1);
};

// ohhh... we were hit by another robot...
Robot.prototype.onHitByBullet = function(ev) {
    var robot;
    robot = ev.robot;
    robot.turn(90 - ev.bulletBearing);
};
        </div>

        <p>There's a bunch of methods in there that you probably don't quite
        understand yet, but we'll see more about them in a minute.</p>

        <h3>Robot Structure</h3>
        <p>Your robot is just a plain old <a
        href="http://pivotallabs.com/users/pjaros/blog/articles/1368-javascript-constructors-prototypes-and-the-new-keyword">Javascript
        constructor function</a>.
        fightcode will use your constructor function to create the instance
        that will fight against other robots.</p>
        <p>This is the simples possible robot you can build (it doesn't do
        much, though):</p>
        <div class="editor code-sample">
function Robot() {}

Robot.prototype.onIdle = function(ev) { };
        </div>

        <h3>OnIdle Function</h3>
 
        <p>The onIdle function is your robot
        <a href="http://en.wikipedia.org/wiki/Game_programming">game loop</a>. fightcode will call it every time your robot
        runs out of actions to do.</p>

        <p>You can use it to run, turn, shoot or anything your robot can do. We
        can implement it with: </p>
        <div class="editor code-sample">
function Robot() {}

Robot.prototype.onIdle = function(ev) {
    var robot = ev.robot;
    robot.turn(90); // keep turning 90 degrees when idle
};
        </div>

        <p>onIdle is a function that takes one argument called ev. The
        structure of ev is this:</p>
        <div class="editor code-sample is-json">
{
    robot: {
        // INFORMATION ON THE CURRENT GAME
        id,                    // Id of your robot
        angle,                 // Current angle of your robot in degrees
        cannonRelativeAngle,   // Current angle of your cannon
                               // relative to your robot
        cannonAbsoluteAngle,   // Current angle of your cannon
                               // relative to the board
        position: {
            x,                 // X position in the board of your robot
            y                  // Y position in the board of your robot
        },
        life,                  // Percentage of the life of your robot
        gunCoolDownTime,       // Time remaining in the cooldown of your
                               // cannon after shooting
        availableClones,       // Number of available clones you can use
        parentId,              // In the case of being a clone, the id
                               // of your parent element. null otherwise
        arenaWidth,            // Width of the board
        arenaHeight            // Height of the board

        // AVAILABLE ACTIONS

        // Moves the given amount ahead
        ahead: function(amount),

        // Moves the given amount backwards
        back: function(amount),

        // Rotates your cannon angle by the specified number of degrees
        rotateCannon: function(amount),

        // Rotates your robot the by the specified number of degrees
        turn: function(amount),

        // Fires your cannon. This functin has a cooldown before you can
        // use it again.
        fire: function(),

        // Subscribe to get notified whenever this action gets called
        // in the queue.
        notify: function(callback),

        // Removes all remaining actions your robot has from the queue
        stop: function(),

        // Clones your robot into another robot and can only be used once
        // per fight. Remember to check the parentId property to stop
        // your clone from shooting you.
        clone: function(),

        // Stops your robot from listening a given event (onWallColision,
        // for instance).
        ignore: function(eventName),

        // Starts listening a given event (onWallColision, for instance).
        listen: function(eventName)
    }
}
        </div>
        <p>The information available in this object is the base for all other
        events. In the other event's we'll only document their additional
        properties.</p>
        <p>Your constructor function receives just the "robot" key present in
        the above object. This means that in your constructor you don't need to
        assign ev.robot to a variable.</p>

        <h3>onRobotCollision</h3>
        <p>This event will be called whenever your robot hits another robot.</p>
        <p>We can implement it as so:</p>

        <div class="editor code-sample">
function Robot() {}

Robot.prototype.onIdle = function(ev) {
    // do something
};

Robot.prototype.onRobotCollision= function(ev) {
    var robot = ev.robot;
    robot.turn(20);
    robot.ahead(100); // trying to run away
};
        </div>

        <p>The object that this function takes as argument is pretty similar to
        the onIdle function with this added properties:</p>

        <div class="editor code-sample is-json">
{
    robot: {
        // Same as onIdle
    },
    bearing,            // Degrees that the other robot relative to my robot
                        // this property can vary from -180 to 180 degrees
    collidedRobot: {    // Information on the robot that collided with mine
        id,             // Id of the robot
        position: {
            x,          // X position of the other robot relative to the board
            y           // Y position of the other robot relative to the board
        },
        angle,          // Angle of the other robot
        cannonAngle,    // Cannon angle relative to the other robot
        life,           // Percentage of life of the other robot
        parentId        // If this is a clone, the clone's parent id.
                        // null otherwise
    },
    myFault             // Boolean value that indicates whether I hit the other
                        // robot or he hit me
}
        </div>

        <h3>onWallCollision</h3>
        <p>This event will be called whenever your robot hits a wall.</p>
        <p>We can implement it as so:</p>

        <div class="editor code-sample">
function Robot() {}

Robot.prototype.onIdle = function(ev) {
    // do something
};

Robot.prototype.onWallCollision = function(ev) {
    var robot = ev.robot;
    robot.turn(ev.bearing); // turn enought to be in a straight
                            // angle with the wall.
};
        </div>

        <p>The object that this function takes as argument is pretty similar to
        the onIdle function with this added properties:</p>

        <div class="editor code-sample is-json">
{
    robot: {
        // Same as onIdle
    },
    bearing            // Degrees of the wall relative to my robot
                       // this property can vary from -180 to 180 degrees
}
        </div>

        <h3>onScannedRobot</h3>
        <p>This event will be called whenever you see another robot.
        It's a very important event since it's usually when you want to
        fire.</p>
        <p>This can happen due to a number of things:</p>
            <ul>
                <li>A robot passed in front of your cannon;</li>
                <li>You turned your cannon and it found a robot;</li>
                <li>You turned your robot (and the cannon with it) and it found a robot;</li>
                <li>You moved and your cannon found a robot.</li>
            </ul>

        <p>We can implement it as so:</p>

        <div class="editor code-sample">
function Robot() {}

Robot.prototype.onIdle = function(ev) {
    // do something
};

Robot.prototype.onScannedRobot = function(ev) {
    var robot = ev.robot;
    robot.fire(); // YAY!
};
        </div>

        <p>The object that this function takes as argument is pretty similar to
        the onIdle function with this added properties:</p>

        <div class="editor code-sample is-json">
{
    robot: {
        // Same as onIdle
    },
    scannedRobot: {
        id,             // Id of the robot
        position: {
            x,          // X position of the other robot relative to the board
            y           // Y position of the other robot relative to the board
        },
        angle,          // Angle of the other robot
        cannonAngle,    // Cannon angle relative to the other robot
        life,           // Percentage of life of the other robot
        parentId        // If this is a clone, the clone's parent id.
                        // null otherwise
    }
}
        </div>

        <h3>onHitByBullet</h3>
        <p>This event will be called whenever a bullet hits your robot.</p>

        <p>We can implement it as so:</p>

        <div class="editor code-sample">
function Robot() {}

Robot.prototype.onIdle = function(ev) {
    // do something
};

Robot.prototype.onHitByBullet = function(ev) {
    var robot = ev.robot;
    robot.turn(ev.bearing); // Turn to wherever the bullet was fired
                            // so we can see who shot it
};
        </div>

        <p>The object that this function takes as argument is pretty similar to
        the onIdle function with this added properties:</p>

        <div class="editor code-sample is-json">
{
    robot: {
        // Same as onIdle
    },
    bearing     // angle that the bullet came from relative
                // to my tank's angle
}
        </div>

        <h3>I still have doubts!!!</h3>
        <p>If you still have doubts, feel free to comment below and we'll do
        our best to answer every single question.</p>
    </div>

    <div class="container">
        <div class="comments">
            <div class="fb-comments"
            data-href="http://fightcodegame.com<%=req.url%>" data-width="940" data-num-posts="50" data-colorscheme="dark"></div>
        </div>
    </div>
</div>

<% include scripts.ejs %>

<script type="robot/script" id="default-code">
//FightCode can only understand your robot
//if its class is called Robot
var Robot = function(robot) {

};

Robot.prototype.onIdle = function(ev) {
    var robot = ev.robot;
    robot.ahead(100);
    robot.rotateCannon(360);
    robot.back(100);
    robot.rotateCannon(360);

};

Robot.prototype.onScannedRobot = function(ev) {
    var robot = ev.robot;
    robot.fire();

};

</script>

<script type="robot/script" id="duck-code">
var Robot = function(robot){
};

Robot.prototype.onIdle = function(ev) {
  var robot = ev.robot;
  robot.ahead(10);
  robot.back(10);
  robot.turn(90);
};
</script>
<script>
    var duckCode = $('#duck-code').html();
    var container = $('.board-container');
    var currentCode = null,
        currentArena = null;
    var startFight = function(code) {
        var color = $('.js-color-picker').spectrum('get').toHex();

        if (!code) {
            code = currentCode;
        }
        if (!code) {
            return;
        }
        currentCode = code;

        if (currentArena) {
            currentArena.stop();
        }

        var player = {
            name: "player",
            code: code,
            color: "#" + color
        };
        var duck = {
            name: "duck",
            code: duckCode,
            color: "#0098ff"
        };

        var options = {
            maxRounds: 10000,
            boardSize: {
                width: container.width(),
                height: container.height()
            },
            streaming: true
        };

        currentArena = new FightArena(container, [player, duck], null, options);
    };

    (function colorPicker() {
        var hiddenColor = $('#robot-color');

        var createUpdatePreviewHandler = function(preview) {
            return function(color) {
                hiddenColor.val("#" + color.toHex());
                preview.css(preview.data('color-picker-property') || 'background-color', color.toHexString());
            }
        };

        $('.js-color-picker').each(function(i, el) {
            el = $(el);
            var preview = $(el.data('color-picker-preview') || '.js-color-picker-preview'),
                color = '<% if (locals.robotColor) { %><%= robotColor %><% } else { %><%}%>';

            if (color === '') {
                color = '#' + Math.floor(Math.random() * Math.pow(2, 24)).toString(16);
            }
            preview.css(preview.data('color-picker-property') || 'background-color', color);

            el.spectrum({
                color: color,
                flat: true,
                showInput: true,
                showInitial: false,
                showAlpha: false,
                showButtons: false,
                move: createUpdatePreviewHandler(preview),
                change: createUpdatePreviewHandler(preview)
            });
        });

    }());

    (function() {
        var editor = $('.editor')[0];
        var board = $('.board'),
            submitButton = $('#submit-btn');

        var defaultCode = $('#default-code').html();
        robotCodeText = decodeURI("<%= locals.robotCode || '' %>"),
        code = null,
        unescapeHtml = function (text) {
            var temp = document.createElement("div");
            temp.innerHTML = text;
            var result = temp.childNodes[0].nodeValue;
            temp.removeChild(temp.firstChild);
            return result;
        };

        if (robotCodeText != "") {
            code = unescapeHtml(robotCodeText);
        } else {
            code = defaultCode;
        }

        var codeMirror = CodeMirror(editor, {
            value: code,
            mode:  "javascript",
            theme: 'ambiance',
            height: 500,
            tabSize: 2,
            lineNumbers: true,
            onChange: function() {
                var code = codeMirror.getValue();
                var error = null;
                $(editor).removeClass('error');
                try {
                    var func = new Function(code);
                } catch(exception) {
                    error = exception;
                    console.log(error);
                    $(editor).addClass('error');
                }
                if (!error) {
                    startFight(code);
                }
            }
        });

        startFight(code);

        submitButton.bind('click', function(ev) {
            var form = $('#robo-code-form');
            $('.code').val(codeMirror.getValue());
            form.submit();
        });
    }());
</script>

<script>
    $('.code-sample').each(function() {
        var scriptEl = this;
        var code = $(scriptEl).html();
        $(scriptEl).empty();
        var isJson = $(scriptEl).is('.is-json');

        var codeMirror = CodeMirror(scriptEl, {
            value: code,
            mode: { name: "javascript", json: isJson},
            theme: 'ambiance',
            height: 500,
            tabSize: 2,
            readOnly: true,
            lineNumbers: true
        });
    });
</script>
<% include footer.ejs %>
