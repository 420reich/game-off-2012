/*! FightCode - v0.1.0
* http://fightcodega.me/
*/

var Ranking, container, ranking;

container = $(".ranking-container");

Ranking = (function() {

  function Ranking(container) {
    this.container = container;
    this.bindEvents();
  }

  Ranking.prototype.bindEvents = function() {
    var links;
    links = this.container.find('.actions a');
    return links.bind('click', function(ev) {
      var link, opponentId;
      link = $(ev.currentTarget);
      opponentId = link.attr('data-robot-id');
      return window.location = '/heynemann/robots/MYROBOT/fight/' + opponentId;
    });
  };

  return Ranking;

})();

if (container.length > 0) {
  ranking = new Ranking(container);
}

var FightArena, arena, container;

container = $(".fight-arena");

FightArena = (function() {

  function FightArena(container) {
    this.container = container;
    this.defaultCode = "window.robotClass = function(){\n};\nwindow.robotClass.prototype.onIdle = function(ev) {\n   var robot = ev.robot;\n   \n   robot.rotateCannon(180);\n   robot.ahead(100);\n   robot.turn(45);\n};\nwindow.robotClass.prototype.onScannedRobot = function(ev) {\n   var robot = ev.robot,\n       scannedRobot = ev.scannedRobot;\n\n   if (robot.id == scannedRobot.parentId || robot.parentId == scannedRobot.id) {\n       return;\n   }\n   robot.fire();\n};\nwindow.robotClass.prototype.onHitByBullet = function(ev) {\n   var robot = ev.robot;\n   \n   if (robot.availableClones > 0) {\n       robot.clone();\n   }\n};";
    this.rotateCode = "window.robotClass = function(){\n};\nwindow.robotClass.prototype.onIdle = function(ev) {\n   var robot = ev.robot;\n\n   robot.turn(1);\n   robot.fire();\n};\nwindow.robotClass.prototype.onWallCollision = function(ev) {\n};\nwindow.robotClass.prototype.onScannedRobot = function(ev) {\n};\nwindow.robotClass.prototype.onHitByBullet = function(ev) {\n};";
    this.wallCode = "window.rotated = {};\nwindow.robotClass = function(){\n};\nwindow.robotClass.prototype.onIdle = function(ev) {\n   var robot = ev.robot;\n   robot.ahead(1);\n   if (!window.rotated[robot.id]) {\n       robot.rotateCannon(90);\n       window.rotated[robot.id] = true;\n   }\n};\nwindow.robotClass.prototype.onWallCollision = function(ev) {\n   var robot = ev.robot;\n   robot.turn(90);\n\n};\nwindow.robotClass.prototype.onRobotCollision = function(ev) {\n   var robot = ev.robot;\n   robot.back(100);\n   robot.turn(270);\n   robot.clone();\n};\nwindow.robotClass.prototype.onScannedRobot = function(ev) {\n   var robot = ev.robot;\n   robot.fire();\n};";
    this.startWorker();
  }

  FightArena.prototype.startWorker = function() {
    var eventData, worker;
    worker = new Worker('/output/fightcode.worker.min.js');
    worker.onmessage = this.receiveWorkerEvent;
    eventData = {
      robots: 2,
      robot1: {
        name: "robot1",
        code: this.rotateCode
      },
      robot2: {
        name: "robot2",
        code: this.wallCode
      }
    };
    return worker.postMessage(eventData);
  };

  FightArena.prototype.receiveWorkerEvent = function(ev) {
    var board, boardContainer, evData, loading;
    evData = ev.data;
    if (evData.type === 'log') {
      console.log("LOG", evData.message);
    }
    if (evData.type === 'results') {
      board = container.find('.board');
      board.empty();
      boardContainer = $('<div></div>');
      board.append(boardContainer);
      loading = container.find('.loading');
      loading.addClass('animate');
      return setTimeout(function() {
        var game;
        loading.detach();
        game = new Game(boardContainer, evData, {
          msPerRound: 5,
          onEndGame: function(result) {
            return console.log(result.winner.robot.name);
          }
        });
        return game.initialize();
      }, 700);
    }
  };

  return FightArena;

})();

if (container.length > 0) {
  arena = new FightArena(container);
}

(function(){

  var menuContainer = $('.menu-container');
  var topBorder = $('.ribbon-container');
  var ribbon = menuContainer.find('.ribbon');

  ribbon.on('click', function(ev){
    ev.preventDefault();
    menuContainer.toggleClass('open');
  });

  ribbon.on('hover', function(){
    topBorder.trigger('hover');
  });

})();

(function() {
  var currentPathname, navbar;
  currentPathname = location.pathname;
  navbar = $('.menu-container');
  navbar.find('.checked').removeClass('checked');
  return navbar.find("a[href='" + currentPathname + "'], a[data-navbar-href='" + currentPathname + "']").addClass('checked');
})();

var UserChart,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$(function() {
  return $(".dial").knob();
});

UserChart = (function() {

  function UserChart(element, data, width, height, bgcolor, colors) {
    this.element = element;
    this.data = data;
    this.width = width;
    this.height = height;
    this.bgcolor = bgcolor;
    this.colors = colors != null ? colors : ["#ed0027"];
    this.draw = __bind(this.draw, this);

    google.load("visualization", "1", {
      packages: ["corechart"]
    });
    google.setOnLoadCallback(this.draw);
  }

  UserChart.prototype.draw = function() {
    var dataTable, options;
    dataTable = google.visualization.arrayToDataTable(this.data);
    options = {
      curveType: "function",
      width: this.width,
      height: this.height,
      lineWidth: 7,
      enableInteractivity: false,
      chartArea: {
        left: 0,
        top: 0,
        width: "100%",
        height: "100%"
      },
      backgroundColor: this.bgcolor,
      colors: this.colors,
      fontSize: 0,
      vAxis: {
        baselineColor: this.bgcolor,
        gridlines: {
          color: this.bgcolor
        },
        textStyle: {
          color: this.bgcolor
        }
      },
      hAxis: {
        baselineColor: this.bgcolor,
        gridlines: {
          color: this.bgcolor
        },
        textStyle: {
          color: this.bgcolor
        }
      }
    };
    return new google.visualization.LineChart(this.element).draw(dataTable, options);
  };

  return UserChart;

})();

$('.user-chart').each(function() {
  var data, text;
  text = $(this).attr('data-chart-values');
  text = text.replace(/[']/gi, "\"");
  text = text.replace(/^\s*/gi, '').replace(/\s*$/gi, '');
  data = JSON.parse(text);
  return new UserChart(this, data, 252, 103, "#f7f7f7");
});
