/*! FightCode - v0.1.0
* http://fightcodega.me/
*/

var selectFighter, top10;

top10 = (function() {

  function top10(elements) {
    this.elements = elements;
    this.bindEvents();
  }

  top10.prototype.bindEvents = function() {
    var _this = this;
    return this.elements.on('hover', function(ev) {
      _this.elements.removeClass('open');
      return $(ev.currentTarget).addClass('open');
    });
  };

  return top10;

})();

selectFighter = (function() {

  function selectFighter(elements) {
    this.elements = elements;
    this.bindEvents();
  }

  selectFighter.prototype.bindEvents = function() {
    return this.elements.on('click', this.onClick);
  };

  selectFighter.prototype.onClick = function(ev) {
    var link;
    ev.preventDefault();
    link = $(ev.currentTarget).attr('href');
    return $.ajax(link).done(function(data) {
      console.log(data);
      return $.modal(data, {
        overlayClose: true,
        opacity: 75
      });
    });
  };

  return selectFighter;

})();

new top10($(".top10 li"));

new selectFighter($('.actions .fight'));

var FightArena,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

FightArena = (function() {

  function FightArena(container, robots, onRound, options) {
    this.container = container;
    this.robots = robots;
    this.onRound = onRound;
    this.options = options;
    this.receiveWorkerEvent = __bind(this.receiveWorkerEvent, this);

    if (!this.options) {
      this.options = {
        maxRounds: 10000,
        boardSize: {
          width: 800,
          height: 500
        }
      };
    }
    this.terminated = false;
    this.worker = null;
    this.game = null;
    this.startWorker();
  }

  FightArena.prototype.stop = function() {
    this.terminated = true;
    this.worker.terminate();
    return this.game && this.game.forceEnd();
  };

  FightArena.prototype.setRobots = function(robots) {
    return this.robots = robots;
  };

  FightArena.prototype.startWorker = function() {
    var eventData;
    if (!this.worker) {
      this.worker = new Worker('/output/fightcode.worker.min.js');
      this.worker.onmessage = this.receiveWorkerEvent;
    }
    eventData = {
      robots: this.robots.length,
      robot1: this.robots[0],
      robot2: this.robots[1],
      streaming: this.options.streaming,
      maxRounds: this.options.maxRounds,
      boardSize: {
        width: this.options.boardSize.width,
        height: this.options.boardSize.height
      }
    };
    if (this.options.streaming) {
      this.startGame();
    }
    return this.worker.postMessage(eventData);
  };

  FightArena.prototype.startGame = function(data) {
    var board, boardContainer;
    if (this.game) {
      this.game.end();
      return;
    }
    board = this.container.find('.board');
    board.empty();
    boardContainer = $('<div></div>');
    board.append(boardContainer);
    this.game = new Game(boardContainer, data, {
      msPerRound: 5
    });
    return this.game.start();
  };

  FightArena.prototype.receiveWorkerEvent = function(ev) {
    var evData;
    if (this.terminated) {
      return;
    }
    evData = ev.data;
    if (evData.type === 'log') {
      console.log("LOG", evData.message);
    }
    if (evData.type === 'stream') {
      this.game.addRound(evData.roundLog);
    }
    if (evData.type === 'results') {
      return this.startGame(evData);
    }
  };

  return FightArena;

})();

(function(){

  var menuContainer = $('.menu-container');
  var topBorder = $('.ribbon-container');
  var ribbon = menuContainer.find('.ribbon');

  ribbon.on('click', function(ev){
    ev.preventDefault();
    menuContainer.toggleClass('open');
  });

  ribbon.on('hover', function(){
    topBorder.trigger('hover');
  });

})();

(function() {
  var currentPathname, navbar;
  currentPathname = location.pathname;
  navbar = $('.menu-container');
  navbar.find('.checked').removeClass('checked');
  return navbar.find("a[href='" + currentPathname + "'], a[data-navbar-href='" + currentPathname + "']").addClass('checked');
})();

var UserChart,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$(function() {
  return $(".dial").knob();
});

UserChart = (function() {

  function UserChart(element, data, width, height, bgcolor, colors) {
    this.element = element;
    this.data = data;
    this.width = width;
    this.height = height;
    this.bgcolor = bgcolor;
    this.colors = colors != null ? colors : ["#ed0027"];
    this.draw = __bind(this.draw, this);

    google.load("visualization", "1", {
      packages: ["corechart"]
    });
    google.setOnLoadCallback(this.draw);
  }

  UserChart.prototype.draw = function() {
    var dataTable, options;
    dataTable = google.visualization.arrayToDataTable(this.data);
    options = {
      curveType: "function",
      width: this.width,
      height: this.height,
      lineWidth: 7,
      enableInteractivity: false,
      chartArea: {
        left: 0,
        top: 0,
        width: "100%",
        height: "100%"
      },
      backgroundColor: this.bgcolor,
      colors: this.colors,
      fontSize: 0,
      vAxis: {
        baselineColor: this.bgcolor,
        gridlines: {
          color: this.bgcolor
        },
        textStyle: {
          color: this.bgcolor
        }
      },
      hAxis: {
        baselineColor: this.bgcolor,
        gridlines: {
          color: this.bgcolor
        },
        textStyle: {
          color: this.bgcolor
        }
      }
    };
    return new google.visualization.LineChart(this.element).draw(dataTable, options);
  };

  return UserChart;

})();

$('.user-chart').each(function() {
  var data, text;
  text = $(this).attr('data-chart-values');
  text = text.replace(/[']/gi, "\"");
  text = text.replace(/^\s*/gi, '').replace(/\s*$/gi, '');
  data = JSON.parse(text);
  return new UserChart(this, data, 252, 103, "#f7f7f7");
});
